/**
 * @file     usb_endpoint.h (180.ARM_Peripherals/Project_Headers/usb_endpoint.h)
 * @brief    Universal Serial Bus Endpoint
 *
 * @version  V4.12.1.210
 * @date     13 April 2016
 *      Author: podonoghue
 */

#ifndef HEADER_USB_ENDPOINT_H
#define HEADER_USB_ENDPOINT_H
/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "usb_defs.h"
#include "derivative.h"

namespace USBDM {

/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Abstraction for USB OTG Controller
 * @{
 */

/** BDTs organised by endpoint, odd/even, transmit/receive */
extern EndpointBdtEntry endPointBdts[];

/** BDTs as simple array */
constexpr BdtEntry *bdts() { return (BdtEntry *)endPointBdts; }

/** Endpoint state values */
enum EndpointState {
   EPIdle = 0,  //!< Idle
   EPDataIn,    //!< Doing a sequence of IN packets
   EPDataOut,   //!< Doing a sequence of OUT packets
   EPStatusIn,  //!< Doing an IN packet as a status handshake
   EPStatusOut, //!< Doing an OUT packet as a status handshake
   EPStall,     //!< Endpoint is stalled
   EPComplete,  //!< Used for command protocol - new command available
};

/**
 * Class for generic endpoint
 */
class Endpoint {

public:
   /**
    * Get name of endpoint state
    *
    * @param[in]  state Endpoint state
    *
    * @return Pointer to static string
    */
   static const char *getStateName(EndpointState state) {
      static const char *names[] = {
         "EPIdle",
         "EPDataIn",
         "EPDataOut,",
         "EPStatusIn",
         "EPStatusOut",
         "EPStall",
         "EPComplete",
      };
      const char *rc = "Unknown";
      if (state<(sizeof(names)/sizeof(names[0]))) {
         rc = names[state];
      }
      return rc;
   }

   /**
    * Get name of endpoint state
    *
    * @return Pointer to static string
    */
   const char *getStateName() {
      return getStateName(fState);
   }

   /**
    * Simple copy routine for volatile buffer
    *
    * @param to      Where to copy to
    * @param from    Where to copy from
    * @param size    Number of bytes to copy
    */
   static void safeCopy(volatile void *to, volatile const void *from, unsigned size) {
      volatile uint8_t *_to   = (volatile uint8_t *)to;
      volatile uint8_t *_from = (volatile uint8_t *)from;
      while(size-->0) {
         *_to++ = *_from++;
      }
   }

protected:
   /** Data 0/1 flag */
   volatile DataToggle fDataToggle;

   /** Odd/Even Transmit buffer flag */
   volatile BufferToggle fTxOdd;

   /** Odd/Even Receive buffer flag */
   volatile BufferToggle fRxOdd;

   /** End-point state */
   volatile EndpointState fState;

   /**
    *  Indicates that the IN transaction needs to be
    *  terminated with ZLP if size is a multiple of fEndpointSize
    */
   volatile bool fNeedZLP;

   /** Pointer to external data buffer for transmit/receive */
   volatile uint8_t* fDataPtr;

   /** Count of remaining bytes in external data buffer to transmit/receive */
   volatile uint16_t fDataRemaining;

   /** Count of data bytes transferred to/from data buffer */
   volatile uint16_t fDataTransferred;

   /**
    *  Callback used on completion of data and handshake phases of transaction.
    *  This routine is called:\n
    *  - After an IN transaction with endpointState = EPDataIn, EPStatusIn.\n
    *  - After an OUT transaction with endpointState = EPDataOut, EPStatusOut.
    *
    * @param[in] endpointState State of endpoint before completion of transaction
    *
    * @note The endpoint state will be set to EPIdle before calling this routine.
    */
   void (*fCallback)(EndpointState endpointState);

   /**
    *  Dummy callback used to catch use of unset callback
    *
    * @param[in]  endpointState State of endpoint before completion
    */
   static void unsetHandlerCallback(EndpointState endpointState) {
      (void)endpointState;
      //      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /** Reference to hardware instance */
   volatile USB_Type &fUsb;

   /** Hardware instance pointer */
   __attribute__((always_inline)) volatile USB_Type &usb() { return fUsb; }

   /** Buffer for Transmit & Receive data */
   volatile uint8_t * const fDataBuffer;

   /**
    * Constructor
    *
    * @param[in]  endpointNumber End-point number
    * @param[in]  usb            Reference to USB hardware
    */
   constexpr Endpoint(int endpointNumber, unsigned endpointSize, uint8_t dataBuffer[], volatile USB_Type &usb) :
            fDataToggle(DataToggle_0),
            fTxOdd(BufferToggle_Even),
            fRxOdd(BufferToggle_Even),
            fState(EPIdle),
            fNeedZLP(false),
            fDataPtr(nullptr),
            fDataRemaining(0),
            fDataTransferred(0),
            fCallback(unsetHandlerCallback),
            fUsb(usb),
            fDataBuffer(dataBuffer),
            fEndpointNumber(endpointNumber),
            fEndpointSize(endpointSize) {
      initialise();
   }

   virtual ~Endpoint() {}

public:

   /** End point number */
   const unsigned fEndpointNumber;

   /**  Size of endpoint (size of maximum transfer)  */
   const uint16_t fEndpointSize;

   /**
    * Initialise endpoint
    *  - Internal state
    *  - BDTs
    */
   void initialise() {
      fDataToggle       = DataToggle_0;
      fTxOdd            = BufferToggle_Even;
      fRxOdd            = BufferToggle_Even;
      fState            = EPIdle;
      fNeedZLP          = false;
      fDataPtr          = nullptr;
      fDataRemaining    = 0;
      fDataTransferred  = 0;
      fCallback         = unsetHandlerCallback;

      // Assumes single shared buffer
      endPointBdts[fEndpointNumber].rxEven.setAddress(nativeToLe32((uint32_t)fDataBuffer));
      endPointBdts[fEndpointNumber].rxOdd.setAddress(nativeToLe32((uint32_t)fDataBuffer));
      endPointBdts[fEndpointNumber].txEven.setAddress(nativeToLe32((uint32_t)fDataBuffer));
      endPointBdts[fEndpointNumber].txOdd.setAddress(nativeToLe32((uint32_t)fDataBuffer));
   }

   /**
    * Set endpoint state
    *
    * @param[in] state
    */
   void setState(EndpointState state) {
      fState = state;
   }

   /**
    * Return end-point state
    *
    * @return Endpoint state
    */
   EndpointState getState() {
      return fState;
   }

   /**
    * Stall endpoint
    */
   void stall() {
//      console.WRITELN("EpX.stall");
      fState = EPStall;
      fUsb.ENDPOINT[fEndpointNumber].ENDPT |= USB_ENDPT_EPSTALL_MASK;
   }

   /**
    * Set Data toggle
    *
    * @param[in] dataToggle
    */
   void setDataToggle(DataToggle dataToggle) {
      fDataToggle = dataToggle;
   }

   /**
    * Clear Stall on endpoint
    */
   void clearStall() {
//      console.WRITELN("EpX.clearStall");
      fUsb.ENDPOINT[fEndpointNumber].ENDPT &= ~USB_ENDPT_EPSTALL_MASK;
      setState(EPIdle);
      setDataToggle(DataToggle_0);
   }

   /**
    * Flip active odd/even buffer state
    *
    * @param[in]  usbStat Value from USB_STAT
    */
   void flipOddEven(const UsbStat usbStat) {
      usbdm_assert(fEndpointNumber == usbStat.endp, "Wrong end point!");

      if (usbStat.tx) {
         // Flip Transmit buffer
         fTxOdd = !usbStat.odd;
      }
      else {
         // Flip Receive buffer
         fRxOdd = !usbStat.odd;
      }
   }

   /**
    * Set callback to execute on completion of data and handshake phases of transaction.
    *
    *  This callback routine is called with parameter endpointState which is
    *  the state of endpoint before completion of transaction:\n
    *  - After an IN transaction with endpointState = EPDataIn, EPStatusIn.\n
    *  - After an OUT transaction with endpointState = EPDataOut, EPStatusOut.
    *  The endpoint state will be set to EPIdle <b>before</b> calling this routine.
    *
    * @param[in]  callback The call-back function to execute\n
    *                      May be nullptr to remove callback
    */
   void setCallback(void (*callback)(EndpointState)) {
      if (callback == nullptr) {
         callback = unsetHandlerCallback;
      }
      fCallback = callback;
   }

   /**
    *  Indicates that the next IN transaction needs to be terminated
    *  with a ZLP if transfer size is multiple of endpoint size
    *
    *  @param[in]  needZLP True to indicate need for ZLPs.
    *
    *  @note This flag is cleared during the transaction
    */
   void setNeedZLP(bool needZLP=true) {
      fNeedZLP = needZLP;
   }

   /**
    * Get Receive BDT entry to be used for next OUT transaction
    *
    * @return Receive BDT
    */
   BdtEntry *getFreeBdtReceiveEntry() {
      return fRxOdd?&endPointBdts[fEndpointNumber].rxOdd:&endPointBdts[fEndpointNumber].rxEven;
   }

   /**
    * Get Receive BDT entry used for last OUT transaction
    *
    * @return Receive BDT
    */
   BdtEntry *getCompleteBdtReceiveEntry() {
      return (!fRxOdd)?&endPointBdts[fEndpointNumber].rxOdd:&endPointBdts[fEndpointNumber].rxEven;
   }

   /**
    * Get Transmit BDT entry to be used for next IN transaction
    *
    * @return Transmit BDT
    */
   BdtEntry *getFreeBdtTransmitEntry() {
      return fTxOdd?&endPointBdts[fEndpointNumber].txOdd:&endPointBdts[fEndpointNumber].txEven;
   }

   /**
    * Get Transmit BDT entry used for last IN transaction
    *
    * @return Transmit BDT
    */
   BdtEntry *getCompleteBdtTransmitEntry() {
      return (!fTxOdd)?&endPointBdts[fEndpointNumber].txOdd:&endPointBdts[fEndpointNumber].txEven;
   }

   /**
    * Gets size of last completed transfer
    *
    * @return Size of transfer
    */
   uint16_t getDataTransferredSize() {
      return fDataTransferred;
   }

   /**
    * Gets maximum transfer size for endpoint
    *
    * @return Maximum size of transfer
    */
   uint16_t getMaximumTransferSize() {
      return fEndpointSize;
   }

   /**
    * Start IN transaction phase [Transmit, device -> host, DATA0/1]
    *
    * @param[in]  state   State to adopt for this phase e.g. EPDataIn, EPStatusIn
    * @param[in]  bufSize Size of buffer to send (may be zero)
    * @param[in]  bufPtr  Pointer to external buffer (may be NULL to indicate fDatabuffer is being used directly)
    */
   void startTxPhase(EndpointState state, uint8_t bufSize=0, volatile const uint8_t *bufPtr=nullptr) {
      // Pointer to data
      fDataPtr = (uint8_t*)bufPtr;

      // Count of bytes transferred
      fDataTransferred = 0;

      // Count of remaining bytes
      fDataRemaining = bufSize;

      // State for this transaction
      fState = state;

      // Configure the BDT for transfer
      startTxPacket();
   }

   /**
    * Configure the BDT for next IN packet [Transmit, device -> host]
    */
   void startTxPacket() {

      // Get BDT to use
      BdtEntry *bdt = getFreeBdtTransmitEntry();

      usbdm_assert(bdt->own == BdtOwner_MCU, "MCU doesn't own BDT!");

      uint16_t size = fDataRemaining;
      if (size > fEndpointSize) {
         size = fEndpointSize;
      }
      // No ZLP needed if sending undersize packet
      if (size<fEndpointSize) {
         setNeedZLP(false);
      }
      // fDataBuffer may be nullptr to indicate using fDataBuffer directly
      if (fDataPtr != nullptr) {
         // Copy the Transmit data to EP buffer
         safeCopy(fDataBuffer, fDataPtr, size);

         // Advance pointer to next data
         fDataPtr += size;
      }
      // Count of transferred bytes
      fDataTransferred += size;

      // Count of remaining bytes
      fDataRemaining   -= size;

      // Set up to Transmit packet
      bdt->setByteCount((uint8_t)size);
      if (fDataToggle == DataToggle_1) {
         bdt->setControl(BDTEntry_OWN_MASK|BDTEntry_DATA1_MASK|BDTEntry_DTS_MASK);
      }
      else {
         bdt->setControl(BDTEntry_OWN_MASK|BDTEntry_DATA0_MASK|BDTEntry_DTS_MASK);
      }
      // console.WRITE("BdtTx(s=").WRITE(size).WRITE(",").WRITE(fDataToggle?"D1,":"D0,").WRITE(fTxOdd?"Odd),":"Even),");;
   }

   /**
    * Start an OUT transaction phase [Receive, device <- host, DATA0/1]
    *
    *   @param[in]  state   - State to adopt for phase e.g. EPIdle, EPDataOut, EPStatusOut
    *   @param[in]  bufSize - Size of data to transfer (may be zero)
    *   @param[in]  bufPtr  - Buffer for data (may be nullptr)
    */
   void startRxPhase(EndpointState state, uint8_t bufSize=0, uint8_t *bufPtr=nullptr) {
      // Count of bytes transferred
      fDataTransferred     = 0;
      // Total bytes to Receive
      fDataRemaining       = bufSize;
      // Where to (eventually) place data
      fDataPtr             = bufPtr;
      // State to adopt
      fState               = state;
      // Configure the BDT for transfer
      startRxPacket();
   }

   /**
    * Configure the BDT for OUT packet [Receive, device <- host, DATA0/1]
    *
    * @note Always uses EP_MAXSIZE for packet size accepted irrespective of remaining transfer size.\n
    *       This is necessary to ensure the endpoint can accept a SETUP packet.
    */
   void startRxPacket() {

      // Get BDT to use
      BdtEntry *bdt = getFreeBdtReceiveEntry();

      usbdm_assert(bdt->own == BdtOwner_MCU, "MCU doesn't own BDT!");

      // Set up to Receive packet
      // Always used maximum size even if expecting less data
      bdt->setByteCount(fEndpointSize);
      if (fDataToggle) {
         bdt->setControl(BDTEntry_OWN_MASK|BDTEntry_DATA1_MASK|BDTEntry_DTS_MASK);
      }
      else {
         bdt->setControl(BDTEntry_OWN_MASK|BDTEntry_DATA0_MASK|BDTEntry_DTS_MASK);
      }
      // console.WRITE("BdtRx(s=").WRITE(EP_MAXSIZE).WRITE(fDataToggle?",D1:":",D0:").WRITE(fRxOdd?"Odd),":"Even),");
   }

   /**
    *  Save the data from an OUT packet and advance pointers etc.
    *
    *  @return Number of bytes saved
    */
   uint8_t saveRxData() {

      // Get BDT to use
      BdtEntry *bdt = getCompleteBdtReceiveEntry();

      uint8_t size = bdt->bc;

      if (size > 0) {
         // Check if more data than requested - discard excess
         if (size > fDataRemaining) {
            size = fDataRemaining;
         }
         // Check if external buffer in use
         if (fDataPtr != nullptr) {
            // Copy the data from the Receive buffer to external buffer
            ( void )memcpy((void*)fDataPtr, (void*)fDataBuffer, size);
            // Advance buffer ptr
            fDataPtr    += size;
         }
         // Count of transferred bytes
         fDataTransferred += size;
         // Count down bytes to go
         fDataRemaining   -= size;
      }
      else {
         console.WRITELN("RxSize = 0\n");
      }
      return size;
   }

   /**
    * Handle OUT [Receive, device <- host, DATA0/1]
    */
   void handleOutToken() {
      //      console.WRITE("Out(),");

      uint8_t transferSize = 0;

      // Toggle DATA0/1 for next packet
      fDataToggle = !fDataToggle;

      switch (fState) {
         case EPDataOut:        // Receiving a sequence of OUT packets
            // Save the data from the Receive buffer
            transferSize = saveRxData();
            if ((transferSize < fEndpointSize) || (fDataRemaining == 0)) {
               // Completed transfer when undersize packet or received expected number of bytes
               // Now idle
               fState = EPIdle;
               fCallback(EPDataOut);
            }
            else {
               // Set up for next OUT packet
               startRxPacket();
            }
            break;

         case EPStatusOut:       // Done OUT packet as a status handshake from host (IN CONTROL transfer)
            // No action
            fState = EPIdle;
            fCallback(EPStatusOut);
            break;

         // We don't expect an OUT token while in the following states
         case EPDataIn:    // Doing a sequence of IN packets (until data count <= fEndpointSize)
         case EPStatusIn:  // Just done an IN packet as a status handshake
         case EPIdle:      // Idle
         case EPStall:     // Not used
         default:
            console.WRITE("Unexpected OUT, ep=").WRITE(fEndpointNumber).WRITE(", s=").WRITELN(getStateName());
            fState = EPIdle;
            break;
      }
   }

   /**
    * Handle IN token [Transmit, device -> host]
    */
   void handleInToken() {
      //       console.WRITE("In(),");

      // Toggle DATA0/1 for next packet
      fDataToggle = !fDataToggle;

      //   console.WRITELN(fHardwareState[BDM_OUT_ENDPOINT].data0_1?"ep2HandleInToken-T-1":"ep2HandleInToken-T-0");

      switch (fState) {
         case EPDataIn:    // Doing a sequence of IN packets
            // Check if packets remaining
            if ((fDataRemaining > 0) || fNeedZLP) {
               // Set up next IN packet
               startTxPacket();
            }
            else {
               fState = EPIdle;
               // Execute callback function at end of IN packets
               fCallback(EPDataIn);
            }
            break;


         case EPStatusIn: // Just done an IN packet as a status handshake for an OUT Data transfer
            // Now Idle
            fState = EPIdle;
            // Execute callback function at end of OUT packets
            fCallback(EPStatusIn);
            break;

         // We don't expect an IN token while in the following states
         case EPIdle:      // Idle (Transmit complete)
         case EPDataOut:   // Doing a sequence of OUT packets (until data count <= fEndpointSize)
         case EPStatusOut: // Doing an OUT packet as a status handshake
         default:
            console.WRITE("Unexpected IN, ep=").WRITE(fEndpointNumber).WRITE(", s=").WRITELN(getStateName());
            fState = EPIdle;
            break;
      }
   }

   /**
    * Gets pointer to USB data buffer
    *
    * @return Pointer to buffer
    */
   volatile uint8_t *getBuffer() {
      return fDataBuffer;
   }

};

/**
 * Class for generic endpoint
 *
 * @tparam Info         Class describing associated USB hardware
 * @tparam ENDPOINT_NUM Endpoint number
 * @tparam EP_MAXSIZE   Maximum size of packet
 */
template<class Info, unsigned ENDPOINT_NUM, unsigned EP_MAXSIZE>
class Endpoint_T : public Endpoint {

private:
   /** Buffer for Transmit & Receive data */
   static uint8_t fAllocatedDataBuffer[EP_MAXSIZE] __attribute__ ((aligned (8)));

public:
   /** Size of endpoint (maximum transfer size) */
   static constexpr unsigned BUFFER_SIZE = EP_MAXSIZE;

   /**
    * Constructor
    */
   Endpoint_T() :
      Endpoint(ENDPOINT_NUM, EP_MAXSIZE, fAllocatedDataBuffer, Info::usb()) {
   }
};

template<class Info, unsigned ENDPOINT_NUM, unsigned EP_MAXSIZE>
uint8_t Endpoint_T<Info, ENDPOINT_NUM, EP_MAXSIZE>::fAllocatedDataBuffer[EP_MAXSIZE];

/**
 * Class for CONTROL endpoint
 *
 * @tparam Info       Class describing associated USB hardware
 * @tparam EP0_SIZE   Maximum size of packet
 */
template<class Info, unsigned EP0_SIZE>
class ControlEndpoint : public Endpoint_T<Info, 0, EP0_SIZE> {

protected:
   using Endpoint_T<Info, 0, EP0_SIZE>::fUsb;

public:
   using Endpoint::fState;
   using Endpoint::startRxPacket;
   using Endpoint::getFreeBdtReceiveEntry;
   using Endpoint::startTxPhase;
   using Endpoint::startRxPhase;

   /** End point number */
   static constexpr unsigned fEndpointNumber = 0;

   /**
    * Constructor
    */
   constexpr ControlEndpoint() {
   }

   /**
    * Destructor
    */
   virtual ~ControlEndpoint() {
   }

   /**
    * Initialise endpoint
    *  - Internal state
    *  - BDTs
    *  - fUsb.ENDPOINT[].ENDPT
    */
   void initialise() {
      Endpoint::initialise();

      // Receive/Transmit/SETUP
      fUsb.ENDPOINT[0].ENDPT = USB_ENDPT_EPRXEN_MASK|USB_ENDPT_EPTXEN_MASK|USB_ENDPT_EPHSHK_MASK;
   }

   /**
    * Start empty status IN transaction phase [Transmit, device -> host, DATA1]
    * Used to acknowledge a DATA OUT transaction.
    *
    * State       = EPStatusIn
    * Data Toggle = DATA1
    */
   void startTxStatus() {
      Endpoint::setDataToggle(DataToggle_1);
      startTxPhase(EPStatusIn);
   }

   /**
    * Start an SETUP transaction phase [Receive, device <- host, DATA0]
    *
    * State       = EPIdle
    * Data Toggle = DATA0
    */
   void startSetupTransaction() {
      Endpoint::setDataToggle(DataToggle_0);
      startRxPhase(EPIdle);
   }

   /**
    * Conditionally set up for SETUP packet [Rx, host -> device, DATAx]
    * If already configured for OUT transfer does nothing.
    *
    * This routine would be used after processing a SETUP packet (before data phase).
    *
    * State       = unchanged
    * Data Toggle = unchanged
    */
   void checkSetupReady() {
      // Get BDT to use
      BdtEntry *bdt = getFreeBdtReceiveEntry();

      if (bdt->own == BdtOwner_MCU) {
         // Make ready for SETUP packet
         startRxPacket();
      }
   }

   /**
    * Modifies endpoint state after SETUP has been received.
    * DATA1 is toggle for first packet in data phase
    *
    * State       = EPIdle
    * Data Toggle = DATA1
    */
   void setupReceived() {
      fState      = EPIdle;
      Endpoint::setDataToggle(DataToggle_1);
   }
};

/**
 * Class for IN endpoint
 *
 * @tparam Info         Class describing associated USB hardware
 * @tparam ENDPOINT_NUM Endpoint number
 * @tparam EP_MAXSIZE   Maximum size of packet
 */
template<class Info, unsigned ENDPOINT_NUM, unsigned EP_MAXSIZE>
class InEndpoint : public Endpoint_T<Info, ENDPOINT_NUM, EP_MAXSIZE> {

protected:
   using Endpoint_T<Info, ENDPOINT_NUM, EP_MAXSIZE>::fUsb;

private:
   // Make private
   using Endpoint::startRxPhase;
   using Endpoint::startRxPacket;
   using Endpoint::saveRxData;

public:
   /**
    * Constructor
    */
   constexpr InEndpoint() {
   }

   /**
    * Initialise endpoint
    *  - Internal state
    *  - BDTs
    *  - fUsb.ENDPOINT[].ENDPT
    */
   void initialise() {
      Endpoint::initialise();

      // Transmit only
      fUsb.ENDPOINT[ENDPOINT_NUM].ENDPT = USB_ENDPT_EPTXEN_MASK|USB_ENDPT_EPHSHK_MASK;
   }
};

/**
 * Class for OUT endpoint
 *
 * @tparam Info         Class describing associated USB hardware
 * @tparam ENDPOINT_NUM Endpoint number
 * @tparam EP_MAXSIZE   Maximum size of packet
 */
template<class Info, unsigned ENDPOINT_NUM, unsigned EP_MAXSIZE>
class OutEndpoint : public Endpoint_T<Info, ENDPOINT_NUM, EP_MAXSIZE> {

protected:
   using Endpoint_T<Info, ENDPOINT_NUM, EP_MAXSIZE>::fUsb;

private:
   // Make private
   using Endpoint::startTxPhase;
   using Endpoint::startTxPacket;

public:
   /**
    * Constructor
    */
   constexpr OutEndpoint() {
   }

   /**
    * Initialise endpoint
    *  - Internal state
    *  - BDTs
    *  - fUsb.ENDPOINT[].ENDPT
    */
   void initialise() {
      Endpoint::initialise();

      // Receive only
      fUsb.ENDPOINT[ENDPOINT_NUM].ENDPT = USB_ENDPT_EPRXEN_MASK|USB_ENDPT_EPHSHK_MASK;
   }
};

/**
 * End USB_Group
 * @}
 */

}; // end namespace

#endif /* HEADER_USB_ENDPOINT_H */
